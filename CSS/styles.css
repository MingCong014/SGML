/* Defining color palette. Remember to commit to git respository if there's any update*/
:root {
  /* use of "root" pseudo class selector which matches the HTML element to define our global variables or custom properties */
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
}

/* defining a rule using universal selector */
*,
*::after,
*::before {
  box-sizing: border-box;
}

/* Typography */

html {
  /* 62.5% of 16pxm = 10px  This is to ease calculation for rem */
  font-size: 62.5%;
}

body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5;
  color: var(--color-body);
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
}

h1 {
  /* 1 x font size of the html element */
  font-size: 7rem;
}
/* Experiment shows that we should use the same bottom margin for h1 & h2 */
h2 {
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
}

p {
  margin-top: 0;
}

/* a media query is used to adapt to screens that are larger than 1024 pixels */
@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/* Links */
a {
  text-decoration: none;
}

.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}

/* use the after psuedo element selector to add --> arrow*/
.link-arrow::after {
  content: "-->";
  margin-left: 5px;
  transition: margin 0.15s;
}

.link-arrow:hover::after {
  margin-left: 10px;
}

@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5 rem;
  }
}

/* Badges */

.badge {
  border-radius: 20px;
  font-size: 2rem;
  font-weight: 600;
  padding: 0.5rem 2rem;
  white-space: nowrap; /* so that it won't go to the 2nd line in limited space */
}

/* using block element modifier. -- seperates a block or component from modifier*/
.badge--primary {
  background: var(--color-primary);
  color: #fff;
}

.badge--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.badge--small {
  font-size: 1.6rem;
}

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/* Lists */
.list {
  list-style: none;
  padding-left: 0;
  color: var(--color-headings);
}

.list--inline .list__item {
  /* display: inline; will not be able to apply margin, so use inline-block */
  display: inline-block;
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../images/tick.svg);
  padding-left: 3rem; /* without this padding, the ticks will be off the screen */
}

.list--tick .list__item {
  /* We are using nesting here to specify it. Minimize nesting to avoide overly specific selectors. */
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/* Icons */
.icon {
  width: 40px;
  height: 40px;
}

.icon--primary {
  fill: var(--color-primary);
}

/* single hyphen is used here as this is not a variation or a modifier for the icon class.
This is entirely a new class. In BEM, use a single hyphen to separate multiple words */
.icon-container {
  background: #f3f9fa;
  width: 64px;
  height: 64px;
  border-radius: 100%;
  /* NOTE: width and height has no effect on inline elements (e.g. span) */
  display: inline-flex; /*NOT block, so there is no linebreak. However, icon is not in the center, so need to use inline-flex */
  justify-content: center; /* horizontal */
  align-items: center; /* vertical */
}

.btn {
  border-radius: 40px;
  border: 0;
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0; /* adding vertical margin to separate button from other elements */
  padding: 2rem 3rem;
  text-align: center;
  text-transform: uppercase;
  white-space: nowrap; /* When in limited space, the text in button 
  doesn't wrap on to the 2nd line */
}

.btn--primary {
  background: var(--color-primary);
  color: #fff;
}

.btn--primary:hover {
  background: #3a8ffd;
}

.btn--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.btn--secondary:hover {
  background: #00c8eb;
}

.btn--accent {
  background: var(--color-accent);
  color: #fff;
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--block {
  width: 100%;
  display: inline-block;
  /* Becasue anchor elemens are inline by default, so width in inline element does not work */
}

.btn--outline {
  background: #fff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}
.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}

@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/* Inputs */
.input {
  border-radius: 30px;
  border: 1px solid #ccc;
  color: var(--color-headings);
  font-size: 2rem;
  outline: 0; /* Just in case chrome add outline border in older versions */
  padding: 1.5rem 3.5rem;
  text-align: center;
}

::placeholder {
  color: #cdcbd7;
}

@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}
